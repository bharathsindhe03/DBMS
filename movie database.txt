Aim: Demonstrate the concepts of JOIN operations. 
 
Program: Consider the schema for Movie Database: 
ACTOR(Act_id, Act_Name, Act_Gender) 
DIRECTOR(Dir_id, Dir_Name, Dir_Phone) 
MOVIES(Mov_id, Mov_Title, Mov_Year, Mov_Lang, Dir_id) 
MOVIE_CAST(Act_id, Mov_id, Role) 
RATING(Mov_id, Rev_Stars) 
  Write SQL queries to 
	1. List the titles of all movies directed by ‘Hitchcock’. 
	2. Find the movie names where one or more actors acted in two or more movies. 
	3. List all actors who acted in a movie before 2000 and also in a movie after 2015(use JOIN operation). 
	4. Find the title of movies and number of stars for each movie that has at least one rating and find the highest number of stars that movie received. Sort the result by movie title. 
	5. Update rating of all movies directed by ‘Steven Spielberg’ to 5.

#create

create table actor(
	actid int primary key,
	actname varchar(20),
	gender varchar(10)
);

create table director(
	dirid int primary key,
	dirname varchar(20),
	phone int
);

create table movies(
	movieid int primary key,
	title varchar(20),
	year int,
	lang varchar(20),
	dirid int,
	constraint fk1 foreign key(dirid) references director(dirid)
);

create table moviecast(
	actid int,
	movieid int,
	role varchar(20),
	primary key(actid,movieid),
	constraint fk2 foreign key(actid) references actor(actid),
	constraint fk3 foreign key(movieid) references movies(movieid)
);

create table rating(
	movieid int,
	revstar int,
	primary key(movieid,revstar),
	constraint fk4 foreign key(movieid) references movies(movieid)
);

#insert

insert into actor values
(35,"avinash","male"),
(49,"dhanush","male"),
(56,"eshwar","male"),
(60,"rama","male"),
(70,"sita","female");

insert into director values
(100,"dilip",123456),
(101,"abhiram",23467),
(102,"aravind",345678),
(105,"hitchock", 123456),
(106,"steven", 456789),
(103,"bharath",45678),
(104,"charan",56789);

insert into movies values
(1000,"kgf",2019,"kannada",100),
(1001,"bahubali",2018,"kannada",100),
(1002,"animal",2023,"hindi",105),
(1003,"war",1990,"hindi",103),
(1004,"ranna",2013,"kannada",104);


insert into moviecast values
(35,1000,"hero"),
(35,1003,"hero"),
(70,1004,"heroine"),
(49,1001,"hero"),
(56,1002,"hero"),
(60,1004,"hero"),
(60,1000,"guest");

insert into rating values
(1000,10),
(1000,9),
(1003,8),
(1001,9),
(1003,9),
(1004,8);


#q1
select m.title
from director d,movies m
where d.dirid = m.dirid and d.dirname = "hitchock";

#q2
select m.title
from movies m,moviecast mc
where m.movieid = mc.movieid and mc.actid in 
			( select actid 
			  from moviecast
		   	   group by actid
			   having count(*)>1)
group by title
having count(*)>1;

#q3
select actname
from actor a
join moviecast  mc on a.actid = mc.actid
join movies  m on m.movieid = mc.movieid
where m.year not between 2000 and 2015;

#q4
select m.title, max(r.revstar) as max_revstar
from movies m
inner join rating r on m.movieid = r.movieid
group by m.title
having max(r.revstar) > 0
order by m.title;

#q5
update rating 
set revstar = 5
where movieid in ( 
    select m.movieid
    from movies m
    join director d on m.dirid = d.dirid
    where d.dirname = 'steven'
);

select * from rating;

